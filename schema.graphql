# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type LandingPage {
  id: ID!
  headerLogo: ImageFieldOutput
  visi: String
  misi: String
  about: LandingPage_about_Document
  portofolio: LandingPage_portofolio_Document
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type LandingPage_about_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type LandingPage_portofolio_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input LandingPageWhereUniqueInput {
  id: ID
}

input LandingPageWhereInput {
  AND: [LandingPageWhereInput!]
  OR: [LandingPageWhereInput!]
  NOT: [LandingPageWhereInput!]
  id: IDFilter
  visi: StringFilter
  misi: StringFilter
}

input LandingPageOrderByInput {
  id: OrderDirection
  visi: OrderDirection
  misi: OrderDirection
}

input LandingPageUpdateInput {
  headerLogo: ImageFieldInput
  visi: String
  misi: String
  about: JSON
  portofolio: JSON
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input LandingPageUpdateArgs {
  where: LandingPageWhereUniqueInput!
  data: LandingPageUpdateInput!
}

input LandingPageCreateInput {
  headerLogo: ImageFieldInput
  visi: String
  misi: String
  about: JSON
  portofolio: JSON
}

type Apply {
  id: ID!
  name: String
  telpon: String
  email: String
  university: String
  programStudy: String
  cv: FileFieldOutput
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input ApplyWhereUniqueInput {
  id: ID
}

input ApplyWhereInput {
  AND: [ApplyWhereInput!]
  OR: [ApplyWhereInput!]
  NOT: [ApplyWhereInput!]
  id: IDFilter
  name: StringFilter
  telpon: StringFilter
  email: StringFilter
  university: StringFilter
  programStudy: StringFilter
}

input ApplyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  telpon: OrderDirection
  email: OrderDirection
  university: OrderDirection
  programStudy: OrderDirection
}

input ApplyUpdateInput {
  name: String
  telpon: String
  email: String
  university: String
  programStudy: String
  cv: FileFieldInput
}

input FileFieldInput {
  upload: Upload!
}

input ApplyUpdateArgs {
  where: ApplyWhereUniqueInput!
  data: ApplyUpdateInput!
}

input ApplyCreateInput {
  name: String
  telpon: String
  email: String
  university: String
  programStudy: String
  cv: FileFieldInput
}

type Post {
  id: ID!
  title: String
  status: String
  content: Post_content_Document
  publishDate: DateTime
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Career {
  id: ID!
  title: String
  description: Career_description_Document
  Requirements: Career_Requirements_Document
  created_at: DateTime
}

type Career_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Career_Requirements_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CareerWhereUniqueInput {
  id: ID
}

input CareerWhereInput {
  AND: [CareerWhereInput!]
  OR: [CareerWhereInput!]
  NOT: [CareerWhereInput!]
  id: IDFilter
  title: StringFilter
  created_at: DateTimeNullableFilter
}

input CareerOrderByInput {
  id: OrderDirection
  title: OrderDirection
  created_at: OrderDirection
}

input CareerUpdateInput {
  title: String
  description: JSON
  Requirements: JSON
  created_at: DateTime
}

input CareerUpdateArgs {
  where: CareerWhereUniqueInput!
  data: CareerUpdateInput!
}

input CareerCreateInput {
  title: String
  description: JSON
  Requirements: JSON
  created_at: DateTime
}

type Product {
  id: ID!
  gambar: ImageFieldOutput
  name: String
  description: String
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input ProductUpdateInput {
  gambar: ImageFieldInput
  name: String
  description: String
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  gambar: ImageFieldInput
  name: String
  description: String
}

type Contact {
  id: ID!
  name: String
  value: String
}

input ContactWhereUniqueInput {
  id: ID
}

input ContactWhereInput {
  AND: [ContactWhereInput!]
  OR: [ContactWhereInput!]
  NOT: [ContactWhereInput!]
  id: IDFilter
  name: StringFilter
  value: StringFilter
}

input ContactOrderByInput {
  id: OrderDirection
  name: OrderDirection
  value: OrderDirection
}

input ContactUpdateInput {
  name: String
  value: String
}

input ContactUpdateArgs {
  where: ContactWhereUniqueInput!
  data: ContactUpdateInput!
}

input ContactCreateInput {
  name: String
  value: String
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createLandingPage(data: LandingPageCreateInput!): LandingPage
  createLandingPages(data: [LandingPageCreateInput!]!): [LandingPage]
  updateLandingPage(
    where: LandingPageWhereUniqueInput!
    data: LandingPageUpdateInput!
  ): LandingPage
  updateLandingPages(data: [LandingPageUpdateArgs!]!): [LandingPage]
  deleteLandingPage(where: LandingPageWhereUniqueInput!): LandingPage
  deleteLandingPages(where: [LandingPageWhereUniqueInput!]!): [LandingPage]
  createApply(data: ApplyCreateInput!): Apply
  createApplies(data: [ApplyCreateInput!]!): [Apply]
  updateApply(where: ApplyWhereUniqueInput!, data: ApplyUpdateInput!): Apply
  updateApplies(data: [ApplyUpdateArgs!]!): [Apply]
  deleteApply(where: ApplyWhereUniqueInput!): Apply
  deleteApplies(where: [ApplyWhereUniqueInput!]!): [Apply]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createCareer(data: CareerCreateInput!): Career
  createCareers(data: [CareerCreateInput!]!): [Career]
  updateCareer(where: CareerWhereUniqueInput!, data: CareerUpdateInput!): Career
  updateCareers(data: [CareerUpdateArgs!]!): [Career]
  deleteCareer(where: CareerWhereUniqueInput!): Career
  deleteCareers(where: [CareerWhereUniqueInput!]!): [Career]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createContact(data: ContactCreateInput!): Contact
  createContacts(data: [ContactCreateInput!]!): [Contact]
  updateContact(
    where: ContactWhereUniqueInput!
    data: ContactUpdateInput!
  ): Contact
  updateContacts(data: [ContactUpdateArgs!]!): [Contact]
  deleteContact(where: ContactWhereUniqueInput!): Contact
  deleteContacts(where: [ContactWhereUniqueInput!]!): [Contact]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  landingPages(
    where: LandingPageWhereInput! = {}
    orderBy: [LandingPageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [LandingPage!]
  landingPage(where: LandingPageWhereUniqueInput!): LandingPage
  landingPagesCount(where: LandingPageWhereInput! = {}): Int
  applies(
    where: ApplyWhereInput! = {}
    orderBy: [ApplyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Apply!]
  apply(where: ApplyWhereUniqueInput!): Apply
  appliesCount(where: ApplyWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  careers(
    where: CareerWhereInput! = {}
    orderBy: [CareerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Career!]
  career(where: CareerWhereUniqueInput!): Career
  careersCount(where: CareerWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  contacts(
    where: ContactWhereInput! = {}
    orderBy: [ContactOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Contact!]
  contact(where: ContactWhereUniqueInput!): Contact
  contactsCount(where: ContactWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
